{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/app.lint-test.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/start-app.js","dummy/tests/integration/components/swiper-container-test.js","dummy/tests/integration/components/swiper-slide-test.js","dummy/tests/test-helper.js","dummy/tests/tests.lint-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('dummy/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    // jscs:disable disallowDirectPropertyAccess\n    Ember.run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name, options = {}) {\n    (0, _qunit.module)(name, {\n      beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          // jscs:disable requireSpread\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach() {\n        let afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Ember.RSVP.resolve(afterEach).then(() => (0, _destroyApp.default)(this.application));\n      }\n    });\n  };\n});","define('dummy/tests/helpers/start-app', ['exports', 'dummy/app', 'dummy/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    // jscs:disable disallowDirectPropertyAccess\n    let attributes = Ember.merge({}, _environment.default.APP);\n\n    // jscs:disable disallowDirectPropertyAccess\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    // jscs:disable disallowDirectPropertyAccess\n    return Ember.run(() => {\n      let application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('dummy/tests/integration/components/swiper-container-test', ['@ember/test-helpers', 'qunit', 'ember-qunit', 'sinon'], function (_testHelpers, _qunit, _emberQunit, _sinon) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | swiper container', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    hooks.beforeEach(function () {\n      this.actions = {};\n      this.send = (actionName, ...args) => this.actions[actionName].apply(this, args);\n    });\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"ld0i0O6J\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"swiper-container\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal((0, _testHelpers.find)('*').textContent.trim(), '');\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"4Jbo4HFa\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"swiper-container\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal((0, _testHelpers.find)('*').textContent.trim(), 'template block text');\n    });\n\n    (0, _qunit.test)('it set `noSwiping` via attribute and `options`', async function (assert) {\n      let expected = false;\n\n      this.set('noSwiping', expected);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"s6DOLlle\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"swiper-container\\\",null,[[\\\"noSwiping\\\",\\\"registerAs\\\"],[[22,[\\\"noSwiping\\\"]],[22,[\\\"componentInstanceAttr\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.strictEqual(this.get('componentInstanceAttr._swiper.params.noSwiping'), expected, 'Swiper instance `noSwiping` configured by `noSwiping` attribute');\n\n      this.set('options', { noSwiping: expected });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"w11eZs6e\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"swiper-container\\\",null,[[\\\"options\\\",\\\"registerAs\\\"],[[22,[\\\"options\\\"]],[22,[\\\"componentInstanceOpts\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.strictEqual(this.get('componentInstanceOpts._swiper.params.noSwiping'), expected, 'Swiper instance `noSwiping` configured by `options.noSwiping`');\n    });\n\n    (0, _qunit.test)('it should allow attributes to overwrite `options`', async function (assert) {\n      let expected = 'fade';\n\n      this.set('effect', expected);\n      this.set('options', { effect: 'cube' });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"u4GrmRlj\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"swiper-container\\\",null,[[\\\"effect\\\",\\\"options\\\",\\\"registerAs\\\"],[[22,[\\\"effect\\\"]],[22,[\\\"options\\\"]],[22,[\\\"componentInstanceAttr\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.strictEqual(this.get('componentInstanceAttr._swiper.params.effect'), expected, 'Swiper instance configured by attribute not `options`');\n    });\n\n    (0, _qunit.test)('predefined classes are added', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"ld0i0O6J\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"swiper-container\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.ok((0, _testHelpers.find)('.swiper-container'));\n    });\n\n    (0, _qunit.test)('contains the wrapper', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"3mk7wC9Q\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"swiper-container\\\",null,[[\\\"id\\\"],[\\\"swp-container\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.ok((0, _testHelpers.find)('#swp-container').querySelector('.swiper-wrapper'));\n    });\n\n    (0, _qunit.test)('pagination node is present if requested', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"CvnT2sw9\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"swiper-container\\\",null,[[\\\"id\\\",\\\"pagination\\\"],[\\\"swp-container\\\",false]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.notOk((0, _testHelpers.find)('#swp-container').querySelector('.swiper-pagination'), 'pagination not rendered');\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"/Olmt9R7\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"swiper-container\\\",null,[[\\\"id\\\",\\\"pagination\\\"],[\\\"swp-container\\\",true]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.ok((0, _testHelpers.find)('#swp-container').querySelector('.swiper-pagination'), 'pagination is rendered');\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"peYYGnbB\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"swiper-container\\\",null,[[\\\"pagination\\\"],[\\\".custom-pagination\\\"]]],false],[6,\\\"div\\\"],[10,\\\"class\\\",\\\"custom-pagination\\\"],[8],[9]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.ok((0, _testHelpers.find)('.custom-pagination').classList.contains('swiper-pagination-clickable'), 'custom pagination element selector configured');\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"xhIboplg\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"swiper-container\\\",null,[[\\\"pagination\\\"],[[26,\\\"hash\\\",null,[[\\\"el\\\"],[\\\".custom-pagination\\\"]]]]]],false],[6,\\\"div\\\"],[10,\\\"class\\\",\\\"custom-pagination\\\"],[8],[9]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.ok((0, _testHelpers.find)('.custom-pagination').classList.contains('swiper-pagination-clickable'), 'custom pagination object element selector configured');\n\n      this.set('opts', { pagination: { type: 'progressbar' } });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"aUwIYs5Y\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"swiper-container\\\",null,[[\\\"id\\\",\\\"options\\\"],[\\\"swp-container\\\",[22,[\\\"opts\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.ok((0, _testHelpers.find)('#swp-container').querySelector('.swiper-pagination-progressbar'), 'pagination object rendered');\n    });\n\n    (0, _qunit.test)('navigation buttons are present if requested', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"aQLDLXI0\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"swiper-container\\\",null,[[\\\"id\\\",\\\"navigation\\\"],[\\\"swp-container\\\",false]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.notOk((0, _testHelpers.find)('#swp-container').querySelector('.swiper-button-next'));\n      assert.notOk((0, _testHelpers.find)('#swp-container').querySelector('.swiper-button-prev'));\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Ku7gUX0R\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"swiper-container\\\",null,[[\\\"id\\\",\\\"navigation\\\"],[\\\"swp-container\\\",true]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.ok((0, _testHelpers.find)('#swp-container').querySelector('.swiper-button-next'));\n      assert.ok((0, _testHelpers.find)('#swp-container').querySelector('.swiper-button-prev'));\n\n      this.set('opts', { navigation: true });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"aUwIYs5Y\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"swiper-container\\\",null,[[\\\"id\\\",\\\"options\\\"],[\\\"swp-container\\\",[22,[\\\"opts\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.ok((0, _testHelpers.find)('#swp-container').querySelector('.swiper-button-next'));\n      assert.ok((0, _testHelpers.find)('#swp-container').querySelector('.swiper-button-prev'));\n    });\n\n    (0, _qunit.test)('it supports `effect` attribute', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"AvvsYfEK\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"swiper-container\\\",null,[[\\\"id\\\",\\\"effect\\\"],[\\\"swp-container\\\",\\\"fade\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.ok((0, _testHelpers.find)('#swp-container.swiper-container-fade'), 'Container has `fade` class');\n    });\n\n    (0, _qunit.test)('it destroys the Swiper instance when component element destroyed', async function (assert) {\n      assert.expect(2);\n      this.set('componentInstance', null);\n      this.set('active', true);\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"QnPCQOLs\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[4,\\\"if\\\",[[22,[\\\"active\\\"]]],null,{\\\"statements\\\":[[1,[26,\\\"swiper-container\\\",null,[[\\\"registerAs\\\"],[[22,[\\\"componentInstance\\\"]]]]],false]],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      Ember.run(() => {\n        let componentInstance = this.get('componentInstance');\n        assert.ok(componentInstance._swiper, 'Swiper intantiated');\n\n        _sinon.default.stub(componentInstance._swiper, 'destroy').callsFake(() => assert.ok(true, 'destroy was called')).callThrough();\n\n        this.set('active', false);\n      });\n    });\n\n    (0, _qunit.test)('it removes all `slideChangeTransitionEnd` handlers when component element destroyed', async function (assert) {\n      this.set('componentInstance', null);\n      this.set('rendered', true);\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"D0ni9bvZ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[4,\\\"if\\\",[[22,[\\\"rendered\\\"]]],null,{\\\"statements\\\":[[1,[26,\\\"swiper-container\\\",null,[[\\\"registerAs\\\"],[[22,[\\\"componentInstance\\\"]]]]],false]],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      let componentInstance = this.get('componentInstance');\n      let swiperInstance = componentInstance._swiper;\n      let originalDestroy = swiperInstance.destroy;\n      let originalSwiperOff = swiperInstance.off;\n\n      swiperInstance.off = (evt, ...args) => {\n        if (evt === 'slideChangeTransitionEnd') {\n          assert.ok(true, 'slideChangeTransitionEnd');\n        }\n        originalSwiperOff.apply(swiperInstance, [evt, ...args]);\n      };\n\n      swiperInstance.destroy = (...args) => {\n        swiperInstance.off = originalSwiperOff;\n        swiperInstance.destroy = originalDestroy;\n        originalDestroy.apply(swiperInstance, ...args);\n      };\n\n      this.set('rendered', false); // trigger swipper destroy\n    });\n\n    (0, _qunit.test)('it yields a slide component', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"8oyd66OH\",\n        \"block\": \"{\\\"symbols\\\":[\\\"container\\\"],\\\"statements\\\":[[4,\\\"swiper-container\\\",null,null,{\\\"statements\\\":[[1,[21,1,[\\\"slide\\\"]],false]],\\\"parameters\\\":[1]},null]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal((0, _testHelpers.findAll)('.swiper-slide').length, 1, 'renders a single slide');\n    });\n\n    (0, _qunit.test)('it activates the slide at index `currentSlide` on render', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"no2asbK2\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"swiper-container\\\",null,[[\\\"currentSlide\\\"],[1]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[20,\\\"swiper-slide\\\"],false],[0,\\\"\\\\n        \\\"],[1,[20,\\\"swiper-slide\\\"],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      let lastSlide = Array.from((0, _testHelpers.findAll)('.swiper-slide')).pop();\n\n      assert.ok(lastSlide && lastSlide.classList.contains('swiper-slide-active'), 'set slide at index 1 to active');\n    });\n\n    (0, _qunit.test)('it updates the active slide when `currentSlide` is updated', async function (assert) {\n      this.set('currentSlide', 0);\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"cLJ6F7pt\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"swiper-container\\\",null,[[\\\"currentSlide\\\"],[[22,[\\\"currentSlide\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[20,\\\"swiper-slide\\\"],false],[0,\\\"\\\\n        \\\"],[1,[20,\\\"swiper-slide\\\"],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      this.set('currentSlide', 1);\n\n      let lastSlide = Array.from((0, _testHelpers.findAll)('.swiper-slide')).pop();\n\n      assert.ok(lastSlide && lastSlide.classList.contains('swiper-slide-active'), 'set slide at index 1 to active');\n    });\n\n    (0, _qunit.test)('it triggers `swiper.update()` when `updateFor` is updated', async function (assert) {\n      this.set('updateFor', '');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"19hc/H2Q\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[1,[26,\\\"swiper-container\\\",null,[[\\\"updateFor\\\",\\\"registerAs\\\"],[[22,[\\\"updateFor\\\"]],[22,[\\\"componentInstance\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      let componentInstance = this.get('componentInstance');\n\n      _sinon.default.stub(componentInstance._swiper, 'update').callsFake(() => assert.ok(true, 'called swiper.update')).callThrough();\n\n      this.set('updateFor', 'updateTranslate');\n    });\n\n    (0, _qunit.test)('it updates the `currentSlide` when viewing and removing the last item', async function (assert) {\n      this.set('itemList', ['item-1', 'item-2']);\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"595je4iD\",\n        \"block\": \"{\\\"symbols\\\":[\\\"item\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"swiper-container\\\",null,[[\\\"navigation\\\",\\\"updateFor\\\",\\\"currentSlide\\\"],[true,[22,[\\\"itemList\\\"]],[22,[\\\"currentSlide\\\"]]]],{\\\"statements\\\":[[4,\\\"each\\\",[[22,[\\\"itemList\\\"]]],null,{\\\"statements\\\":[[4,\\\"swiper-slide\\\",null,null,{\\\"statements\\\":[[0,\\\"            \\\"],[6,\\\"p\\\"],[11,\\\"class\\\",[27,[[21,1,[]]]]],[8],[1,[21,1,[]],false],[9],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[]},null]],\\\"parameters\\\":[1]},null]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      await (0, _testHelpers.click)('.swiper-button-next');\n      await (0, _testHelpers.waitFor)('.swiper-slide-active .item-2');\n\n      this.set('itemList', ['item-1']);\n      await (0, _testHelpers.waitFor)('.swiper-slide-active .item-1');\n\n      assert.equal(this.get('currentSlide'), 0);\n    });\n\n    (0, _qunit.test)('it subscribes `events` actions map as Swiper events', async function (assert) {\n      this.actions.onBeforeDestroy = () => assert.ok(true);\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"s1xToYQO\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[1,[26,\\\"swiper-container\\\",null,[[\\\"events\\\"],[[26,\\\"hash\\\",null,[[\\\"beforeDestroy\\\"],[[26,\\\"action\\\",[[21,0,[]],\\\"onBeforeDestroy\\\"],null]]]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n    });\n\n    (0, _qunit.test)('it supports manual swiper initialization when `init` event configured', async function (assert) {\n      this.set('componentInstance', null);\n      this.actions.onInit = () => assert.ok(true, 'invoked init handler');\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"W01Zwafq\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[1,[26,\\\"swiper-container\\\",null,[[\\\"registerAs\\\",\\\"events\\\"],[[22,[\\\"componentInstance\\\"]],[26,\\\"hash\\\",null,[[\\\"init\\\"],[[26,\\\"action\\\",[[21,0,[]],\\\"onInit\\\"],null]]]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n    });\n\n    (0, _qunit.test)('it triggers `autoplay` with custom `currentSlide`', async function (assert) {\n      let run = false;\n\n      this.actions.onAutoplay = () => {\n        if (run) {\n          return true;\n        }\n\n        let lastSlide = Array.from((0, _testHelpers.findAll)('.swiper-slide')).pop();\n\n        assert.ok(lastSlide && lastSlide.classList.contains('swiper-slide-active'), 'set slide at index 2 to active');\n\n        run = true;\n      };\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"ALRn/t6e\",\n        \"block\": \"{\\\"symbols\\\":[\\\"sc\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"swiper-container\\\",null,[[\\\"autoplay\\\",\\\"currentSlide\\\",\\\"events\\\"],[[26,\\\"hash\\\",null,[[\\\"delay\\\"],[10]]],1,[26,\\\"hash\\\",null,[[\\\"autoplay\\\"],[[26,\\\"action\\\",[[21,0,[]],\\\"onAutoplay\\\"],null]]]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[20,\\\"swiper-slide\\\"],false],[0,\\\"\\\\n        \\\"],[1,[20,\\\"swiper-slide\\\"],false],[0,\\\"\\\\n        \\\"],[1,[20,\\\"swiper-slide\\\"],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n    });\n\n    (0, _qunit.test)('it exposes default swiper navigation controls to `navigation=true`', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"3B2KZ0in\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"swiper-container\\\",null,[[\\\"navigation\\\"],[true]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[20,\\\"swiper-slide\\\"],false],[0,\\\"\\\\n        \\\"],[1,[20,\\\"swiper-slide\\\"],false],[0,\\\"\\\\n        \\\"],[1,[20,\\\"swiper-slide\\\"],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.ok((0, _testHelpers.find)('.swiper-button-next'), 'rendered nav next button');\n      assert.ok((0, _testHelpers.find)('.swiper-button-prev'), 'rendered nav prev button');\n\n      let slides = Array.from((0, _testHelpers.findAll)('.swiper-slide'));\n\n      await (0, _testHelpers.click)('.swiper-button-next');\n\n      assert.ok(slides[1].classList.contains('swiper-slide-active'), 'next button click handled');\n\n      await (0, _testHelpers.click)('.swiper-button-prev');\n\n      assert.ok(slides[0].classList.contains('swiper-slide-active'), 'previous button click handled');\n    });\n\n    (0, _qunit.test)('it applies custom navigation hash of control selectors', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"xV17OurY\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"swiper-container\\\",null,[[\\\"navigation\\\"],[[26,\\\"hash\\\",null,[[\\\"nextEl\\\",\\\"prevEl\\\"],[\\\".is-next\\\",\\\".is-last\\\"]]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[20,\\\"swiper-slide\\\"],false],[0,\\\"\\\\n        \\\"],[1,[20,\\\"swiper-slide\\\"],false],[0,\\\"\\\\n        \\\"],[1,[20,\\\"swiper-slide\\\"],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.ok((0, _testHelpers.find)('.is-next'), 'rendered custom nav next button');\n      assert.ok((0, _testHelpers.find)('.is-last'), 'rendered custom nav prev button');\n    });\n\n    (0, _qunit.test)('it applies custom `navigation.disabledClass`', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"J/Qw1MZ7\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"swiper-container\\\",null,[[\\\"navigation\\\"],[[26,\\\"hash\\\",null,[[\\\"disabledClass\\\"],[\\\"is-disabled\\\"]]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[20,\\\"swiper-slide\\\"],false],[0,\\\"\\\\n        \\\"],[1,[20,\\\"swiper-slide\\\"],false],[0,\\\"\\\\n        \\\"],[1,[20,\\\"swiper-slide\\\"],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.ok((0, _testHelpers.find)('.is-disabled'), 'rendered custom disabled class');\n    });\n\n    (0, _qunit.test)('it provides swiper instance as context of `update`', async function (assert) {\n      this.set('updateForValue', '');\n      this.set('componentInstance', null);\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"upw4TSay\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"swiper-container\\\",null,[[\\\"registerAs\\\",\\\"updateFor\\\"],[[22,[\\\"componentInstance\\\"]],[22,[\\\"updateForValue\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      let swiperInstance = this.get('componentInstance._swiper');\n      let originalUpdate = swiperInstance.update;\n      swiperInstance.update = function () {\n        assert.strictEqual(this, swiperInstance, 'update invoked with swiper context');\n        swiperInstance.update = originalUpdate;\n      };\n\n      this.set('updateForValue', 'trigger update');\n    });\n  });\n});","define('dummy/tests/integration/components/swiper-slide-test', ['@ember/test-helpers', 'qunit', 'ember-qunit'], function (_testHelpers, _qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | swiper slide', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"0rLGX6Q2\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"swiper-slide\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal((0, _testHelpers.find)('*').textContent.trim(), '');\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"IXJ+SVpd\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"swiper-slide\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal((0, _testHelpers.find)('*').textContent.trim(), 'template block text');\n    });\n\n    (0, _qunit.test)('predefined classes are added', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"uZcW51+R\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"swiper-slide\\\",null,[[\\\"id\\\"],[\\\"slide\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.ok((0, _testHelpers.find)('#slide').classList.contains('swiper-slide'));\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"hTXVGqB8\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"swiper-slide\\\",null,[[\\\"id\\\",\\\"class\\\"],[\\\"slide\\\",\\\"foo bar\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.ok((0, _testHelpers.find)('#slide').classList.contains('swiper-slide'));\n    });\n\n    (0, _qunit.test)('own classes are added', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"hTXVGqB8\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"swiper-slide\\\",null,[[\\\"id\\\",\\\"class\\\"],[\\\"slide\\\",\\\"foo bar\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.ok((0, _testHelpers.find)('#slide').classList.contains('foo'));\n      assert.ok((0, _testHelpers.find)('#slide').classList.contains('bar'));\n    });\n  });\n});","define('dummy/tests/test-helper', ['dummy/app', 'dummy/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('dummy/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/swiper-container-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/swiper-container-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/swiper-slide-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/swiper-slide-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n});","define('dummy/config/environment', [], function() {\n  var prefix = 'dummy';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}